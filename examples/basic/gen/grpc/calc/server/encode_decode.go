// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// calc gRPC server encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/basic/design -o
// $(GOPATH)/src/goa.design/goa/examples/basic

package server

import (
	"context"

	calcsvc "goa.design/goa/examples/basic/gen/calc"
	calcpb "goa.design/goa/examples/basic/gen/grpc/calc/pb"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeAddResponse encodes responses from the "calc" service "add" endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "add", "int", v)
	}
	resp := NewAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "calc" service "add" endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "add", "*calcpb.AddRequest", v)
		}
	}
	var payload *calcsvc.AddPayload
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeConcatResponse encodes responses from the "calc" service "concat"
// endpoint.
func EncodeConcatResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "concat", "string", v)
	}
	resp := NewConcatResponse(result)
	return resp, nil
}

// DecodeConcatRequest decodes requests sent to "calc" service "concat"
// endpoint.
func DecodeConcatRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.ConcatRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.ConcatRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "concat", "*calcpb.ConcatRequest", v)
		}
	}
	var payload *calcsvc.ConcatPayload
	{
		payload = NewConcatPayload(message)
	}
	return payload, nil
}
